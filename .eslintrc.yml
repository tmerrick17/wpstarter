# Import and use airbnb code style
extends: airbnb-base

plugins:
  - import

env:
  es6: true
  browser: true
  commonjs: true
  node: true
  jquery: true

# These can be used everywhere without being defined because of the webpack ProvidePlugin that we use
globals:
  $: true
  jQuery: true

parserOptions:
  ecmaVersion: 2015
  sourceType: module

rules:

  # Requires braces around arrow functions
  # Doesn't work with promise chain return functions
  arrow-body-style:
    - error
    - as-needed

  # Should only have parentheses if arrow function has more than 1 argument
  arrow-parens:
    - warn
    - as-needed

  # Always warn about using underscored variables instead of camelcase
  camelcase:
    - warn
    - properties: always
      ignoreDestructuring: false
      ignoreImports: false

  # Expects commas after functions
  comma-dangle:
    - warn
    - arrays: always-multiline
      objects: always-multiline
      imports: never
      exports: never
      functions: ignore

  # Functions do not always need a return
  consistent-return: 0

  # Functions can be anonymous
  func-names: 0

  function-paren-newline: 0

  # require() does not need to be at the top of the page
  global-require: 0

  # For in loops do not need to be wrapped in an if statment to protect from type
  guard-for-in: 0

  # Arrow functions that directly return a result can be on the same line or on it's own line
  implicit-arrow-linebreak: 0

  # This throws an error if packages are required but not included in 'dependencies'.
  # We ignore this because most of our front-end libraries are in 'devDependencies'
  import/no-extraneous-dependencies: 0

  # Show error when imports cannot be resolved
  import/no-unresolved:
    - 2
    # Ignore the webpack resolver rule for bootstrap packages
    - ignore:
        - bootstrap/
        - "@/lib/"
      caseSensitive: true
      # Also check require statements
      commonjs: true

  # make sure spaces are 4 instead of tabs
  indent:
    - error
    - 4
    - SwitchCase: 1

  # prevent LF vs CRLF errors
  linebreak-style: 0

  # do not worry about a line length, default max length is 100
  max-len: 0

  # allow ~~
  no-bitwise: 0

  # console is allowed
  no-console: 0

  # allow the use of 'continue' within loops
  no-continue: 0

  # allow !!
  no-extra-boolean-cast: 0

  # allow 'for' loop and switch statement labels
  no-labels: 0

  # allow consecutive operators without parentheses
  no-mixed-operators: 0

  # allow multiple lines greater than 2
  no-multiple-empty-lines:
    - warn
    - max: 2
      maxEOF: 1

  # do not reassign function param variables, properties of the variable are alright
  no-param-reassign: 0

  # allow i++ and i--
  no-plusplus: 0

  # able to do this 'foo.hasOwnProperty('bar')' vs only this 'Object.prototype.hasOwnProperty.call(foo, 'bar')'
  no-prototype-builtins: 0

  # allow using globals attached to the Window and other global objects
  no-restricted-globals: 0

  # we should be able to use all properties - this allow the use of Math.pow
  no-restricted-properties: 0

  # do not prevent any javascript syntax, 'class, try-catch...'
  no-restricted-syntax: 0

  # child functions can have variables named the same as the parent
  no-shadow: 0

  # allow underscore prefixed properties on objects
  no-underscore-dangle: 0

  # no unused vars, except for function arguments
  no-unused-vars:
    - error
    - args: none

  # functions are allowed to be hoisted
  no-use-before-define: 0

  # regex escape, might need to support older regex?
  no-useless-escape: 0

  # don't always need arrow functions within objects
  object-shorthand: 0

  # do not worry about the spacing within the block
  padded-blocks:
    - error
    - switches: never

  # arrow functions are not always necessary
  prefer-arrow-callback: 0

  # when using let instead of const and no reassignment, only give a warning, no error
  prefer-const:
    - warn

  # forces the use of destructuring on objects and arrays
  prefer-destructuring: 0

  # our starter does not yet support the Object Spread operator
  prefer-object-spread: 0

  # prefer using `hello, ${name}` vs 'hello, ' + name
  prefer-template: 0

  # parse functions don't require a radix, defaults to 10
  radix:
    - error
    - as-needed

  # we need to have 'use strict' right now until we get our new web server set up
  strict:
    - 0
    - global
